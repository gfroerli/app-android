apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'project-report'

def getLocalProperties() {
    final Properties props = new Properties()
    if (file('secrets.properties').exists()) {
        props.load(new FileInputStream(file('secrets.properties')))
    }
    return props
}

final Properties properties = getLocalProperties()

android {
    compileSdkVersion 31
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId "ch.coredump.watertemp"
        applicationIdSuffix ".zh"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 13
        versionName "1.0.1"

        buildConfigField 'String', 'GFROERLI_API_KEY_PUBLIC', '"' + properties['gfroerli_api_key_public'] + '"'
        buildConfigField 'String', 'MAPBOX_ACCESS_TOKEN', '"' + properties['mapbox_access_token'] + '"'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArgument 'disableAnalytics', 'true'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        // Enable view bindings
        viewBinding true
        // Enable Jetpack Compose
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

    testOptions {
        unitTests.all {
            // Whether failing tests should fail the build
            ignoreFailures false

            // Logging output
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
    }

    packagingOptions { // Exclude potentially conflicting files
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"

    // Support libraries
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.7.0-alpha01'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // Compose: Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Compose: Compose Material Design
    implementation "androidx.compose.material:material:$compose_version"
    // Compose: Animations
    implementation "androidx.compose.animation:animation:$compose_version"
    // Compose: Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    // Compose: Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.0-rc01'
    // Compose: Image loading
    implementation "com.github.skydoves:landscapist-glide:1.4.8"

    // Maplibre SDK
    implementation 'org.maplibre.gl:android-sdk:9.5.2'
    implementation 'org.maplibre.gl:android-plugin-annotation-v9:1.0.0'

    // REST client
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.8.1'

    // Relative time calculation
    implementation 'org.ocpsoft.prettytime:prettytime:5.0.0.Final'

    // Baseline alignment of typography
    implementation 'com.actinarium.aligned:aligned:0.1'

    // Charts
    implementation 'com.github.PhilJay:MPAndroidChart:3.1.0'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // Test rules and transitive dependencies:
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$compose_version")
    // Needed for createComposeRule, but not createAndroidComposeRule:
    debugImplementation("androidx.compose.ui:ui-test-manifest:$compose_version")
}
