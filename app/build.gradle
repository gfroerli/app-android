plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.compose' version "${kotlin_version}"
}
apply plugin: 'project-report'

def getLocalProperties() {
    final Properties props = new Properties()

    // Primary location: ./app/secrets.properties
    if (file('secrets.properties').exists()) {
        props.load(new FileInputStream(file('secrets.properties')))
        println "Secrets loaded from app/secrets.properties"
        return props
    }

    // Fallback location: ~/.config/gfroerli-android/secrets.properties
    final String homeDir = System.getProperty("user.home")
    final File fallbackFile = new File(homeDir, ".config/gfroerli-android/secrets.properties")
    if (fallbackFile.exists()) {
        props.load(new FileInputStream(fallbackFile))
        println "Secrets loaded from ${fallbackFile.absolutePath}"
        return props
    }

    // Return empty properties if neither file exists
    return props
}

final Properties properties = getLocalProperties()

android {
    namespace 'ch.coredump.watertemp'

    defaultConfig {
        applicationId "ch.coredump.watertemp"
        applicationIdSuffix ".zh"
        minSdkVersion 26
        targetSdk 35
        compileSdk 35
        versionCode 18
        versionName "1.1.0"

        buildConfigField 'String', 'GFROERLI_API_KEY_PUBLIC', '"' + properties['gfroerli_api_key_public'] + '"'
        buildConfigField 'String', 'MAPBOX_ACCESS_TOKEN', '"' + properties['mapbox_access_token'] + '"'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments disableAnalytics: 'true'
    }

    dependenciesInfo {
        // Disable dependency metadata when building APKs
        includeInApk = false
        // Include dependency metadata when building Android App Bundles
        includeInBundle = true
    }

    androidResources {
        generateLocaleConfig true
    }

    lintOptions {
        // Workaround for failing "./gradlew :app:lintDebug"
        // See https://github.com/bumptech/glide/issues/4940#issuecomment-1507581182
        lintConfig = file("$rootDir/lint-config.xml")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        // Enable view bindings
        viewBinding true
        // Enable Jetpack Compose
        compose true
        buildConfig true
    }

    testOptions {
        unitTests.all {
            // Whether failing tests should fail the build
            ignoreFailures false

            // Logging output
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
    }

    packagingOptions {
        resources {
            // Exclude potentially conflicting files
            excludes += [
                'META-INF/DEPENDENCIES',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/license.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
                'META-INF/notice.txt',
                'META-INF/ASL2.0',
                'META-INF/AL2.0',
                'META-INF/LGPL2.1'
            ]
        }
    }
}

dependencies {
    // Compose BOM, which ties together compatible versions
    implementation platform("androidx.compose:compose-bom:${compose_bom_version}")
    androidTestImplementation platform("androidx.compose:compose-bom:${compose_bom_version}")

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"

    // Support libraries
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'com.google.android.material:material:1.12.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'

    // Compose: Integration with activities
    implementation 'androidx.activity:activity-compose:1.10.1'
    // Compose: Compose Material Design
    implementation "androidx.compose.material:material" // Compose BOM
    // Compose: Animations
    implementation "androidx.compose.animation:animation" // Compose BOM
    // Compose: Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling" // Compose BOM
    // Compose: Material Icons
    implementation "androidx.compose.material:material-icons-extended" // Compose BOM
    // Compose: Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.9.2'
    // Compose: Image loading
    implementation "com.github.skydoves:landscapist-glide:2.5.1"
    // Compose: Various composables (used for scrollbars)
    implementation "com.composables:core:1.39.0"

    // MapLibre SDK
    implementation 'org.maplibre.gl:android-sdk:11.12.1'
    implementation 'org.maplibre.gl:android-plugin-annotation-v9:3.0.2'

    // REST client
    implementation 'com.squareup.retrofit2:retrofit:3.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:3.0.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.1.0'

    // Relative time calculation
    implementation 'org.ocpsoft.prettytime:prettytime:5.0.9.Final'

    // Charts
    implementation 'com.github.PhilJay:MPAndroidChart:3.1.0'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    // Test rules and transitive dependencies
    androidTestImplementation("androidx.compose.ui:ui-test-junit4") // Compose BOM
    // Needed for createComposeRule, but not createAndroidComposeRule
    debugImplementation("androidx.compose.ui:ui-test-manifest") // Compose BOM
}
